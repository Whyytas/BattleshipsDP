@page "/battle"

@inject PlayerState PlayerState
@inject NavigationManager Navigation
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@if (PlayerState.HubConnection is not null)
{
    @if (!string.IsNullOrEmpty(WinnerTeam))
    {
        <h1 style="color: green;">@WinnerTeam Wins!</h1>
    }

    <div>
        <h3>Player Information</h3>
        <p>Name: @PlayerName</p>
        <p>Connection ID: @PlayerState.HubConnection.ConnectionId</p>
        <p>Team: @PlayerTeam</p>
        @if (isPlayerTurn)
        {
            <h2 style="color: blue;">Your turn!</h2>
        }
    </div>

    @if (!battleStarted)
    {
        <div class="setup-phase" style="margin: 20px 0;">
            @if (isTeamLeader && !hasSelectedStrategy)
            {
                <div>
                    <h3>Select Team Strategy</h3>
                    <select @bind="selectedStrategy">
                        <option value="Random">Random Placement</option>
                        <option value="Edge">Edge Placement</option>
                        <option value="Spaced">Spaced Placement</option>
                    </select>
                    <button @onclick="ConfirmStrategy">Confirm Strategy</button>
                </div>
            }
            @if (!isReadyForBattle)
            {
                <div style="margin-top: 10px;">
                    @if (hasSelectedStrategy)
                    {
                        <p>Selected Strategy: @selectedStrategy</p>
                    }
                    <button @onclick="ReadyForBattle">Ready for Battle</button>
                </div>
            }
            else
            {
                <p>Waiting for other players...</p>
            }
        </div>
    }

    <div style="display: flex; gap: 50px;">
        <!-- Team Board -->
        <div>
            <h3>Team Board (@PlayerTeam)</h3>
            <div style="margin-left: 30px;">
                <!-- Column headers (1-10) -->
                <div style="display: flex; margin-left: 15px;">
                    <div style="display: grid; grid-template-columns: repeat(10, 50px); grid-gap: 5px;">
                        @for (int i = 1; i <= 10; i++)
                        {
                            <div style="text-align: center;">@i</div>
                        }
                    </div>
                </div>
                <!-- Game grid with row headers -->
                <div style="display: flex;">
                    <!-- Row headers (A-J) -->
                    <div style="display: grid; grid-template-rows: repeat(10, 50px); grid-gap: 5px; margin-right: 5px;">
                        @for (char c = 'A'; c <= 'J'; c++)
                        {
                            <div style="height: 50px; display: flex; align-items: center;">@c</div>
                        }
                    </div>
                    <!-- Board cells -->
                    <div style="display: grid; grid-template-columns: repeat(10, 50px); grid-gap: 5px;">
                        @foreach (var row in TeamCells)
                        {
                            @foreach (var cell in row)
                            {
                                <div style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (battleStarted)
        {
            <div>
                <label for="selectedShot">Choose a Shot:</label>
                <select @bind="selectedShot" id="selectedShot" name="selectedShot" disabled="@(!isPlayerTurn)">
                    <option value="Simple">Simple shot</option>
                    <option value="Big">Big shot</option>
                    <option value="Piercer">Piercer shot</option>
                    <option value="Slasher">Slasher shot</option>
                    <option value="Cross">Cross shot</option>
                </select>
                <button @onclick="ShootAtOpponentBoard" disabled="@(!isPlayerTurn)">Fire</button>
            </div>
        }

        <!-- Enemy Board -->
        <div>
            <h3>Enemy Board</h3>
            <div style="margin-left: 30px;">
                <!-- Column headers (1-10) for enemy board -->
                <div style="display: flex; margin-left: 15px;">
                    <div style="display: grid; grid-template-columns: repeat(10, 50px); grid-gap: 5px;">
                        @for (int i = 1; i <= 10; i++)
                        {
                            <div style="text-align: center;">@i</div>
                        }
                    </div>
                </div>
                <!-- Game grid with row headers -->
                <div style="display: flex;">
                    <!-- Row headers (A-J) -->
                    <div style="display: grid; grid-template-rows: repeat(10, 50px); grid-gap: 5px; margin-right: 5px;">
                        @for (char c = 'A'; c <= 'J'; c++)
                        {
                            <div style="height: 50px; display: flex; align-items: center;">@c</div>
                        }
                    </div>
                    <!-- Board cells -->
                    <div style="display: grid; grid-template-columns: repeat(10, 50px); grid-gap: 5px;">
                        @foreach (var row in EnemyCells)
                        {
                            @foreach (var cell in row)
                            {
                                <div @onclick="() => ToggleEnemyHighlight(cell)"
                                     style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            <h3>Shot History</h3>
            <ul>
                @foreach (var command in CommandInvoker.GetHistory())
                {
                    <li>Shot at (@command.Row, @command.Col) - Type: @command.ShotType - @(command.IsPlayerShot ? "Player" : "Enemy")</li>
                }
            </ul>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(gameOverMessage))
    {
        <div style="padding: 20px; background-color: lightgreen; border: 2px solid green; font-weight: bold;">
            @gameOverMessage
        </div>
    }
}

@code {
    private string PlayerName { get; set; } = string.Empty;
    //private string PlayerConnectionId { get; set; } = string.Empty;
    private string PlayerTeam { get; set; } = string.Empty;
    private string WinnerTeam { get; set; } = string.Empty;
    private int? selectedRow = null;
    private int? selectedCol = null;
    private string selectedShot = "Simple";
    private bool isPlayerTurn = false;
    private string gameOverMessage = string.Empty;
    private bool isTeamLeader = false;
    private string selectedStrategy = "Random";
    private bool hasSelectedStrategy = false;
    private bool isReadyForBattle = false;
    private bool battleStarted = false;

    private List<List<GridCell>> TeamCells = new List<List<GridCell>>();
    private List<List<GridCell>> EnemyCells = new List<List<GridCell>>();

    private CommandInvoker CommandInvoker = new CommandInvoker();


    protected override async Task OnInitializedAsync()
    {
        // Initialize both boards (10x10 grid each)
        for (int row = 0; row < 10; row++)
        {
            var teamRow = new List<GridCell>();
            var enemyRow = new List<GridCell>();
            for (int col = 0; col < 10; col++)
            {
                teamRow.Add(new GridCell { Row = row, Col = col });
                enemyRow.Add(new GridCell { Row = row, Col = col });
            }
            TeamCells.Add(teamRow);
            EnemyCells.Add(enemyRow);
        }

        if (IsHubConnectionActive())
        {
            if (PlayerState.HubConnection.State == HubConnectionState.Disconnected)
            {
                await PlayerState.HubConnection.StartAsync();
            }

            // Notify the server that this player is ready
            await PlayerState.HubConnection.SendAsync("PlayerReady");

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive player info from the server
            PlayerState.HubConnection.On<string, string, string, bool>("ReceivePlayerInfo", (name, connectionId, team, isLeader) =>
            {
                PlayerName = name;
                //PlayerConnectionId = connectionId;
                PlayerTeam = team;
                isTeamLeader = isLeader;

                Console.WriteLine($"Received player info: Name={name}, ConnectionID={connectionId}, Team={team}, IsLeader={isLeader}");
                StateHasChanged();
            });

            PlayerState.HubConnection.On("YourTurn", () =>
            {
                Console.WriteLine("It's my turn now!"); // Browser test
                isPlayerTurn = true;  // Rodome žinutę „Your turn“
                StateHasChanged();
            });

            PlayerState.HubConnection.On("NotYourTurn", () =>
            {
                isPlayerTurn = false;  
                InvokeAsync(StateHasChanged);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive board info from the server
            PlayerState.HubConnection.On<List<List<Square>>>("ReceiveBoardInfo", (receivedCells) =>
            {
                // Update TeamCells with the received board state
                TeamCells = receivedCells.Select(row => row.Select(cell => new GridCell
                    {
                        State = cell,
                        Row = receivedCells.IndexOf(row),
                        Col = row.IndexOf(cell)
                    }).ToList()).ToList();
                InvokeAsync(StateHasChanged);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            PlayerState.HubConnection.On<int, int>("ReceiveBlockHighlight", (row, col) =>
            {
                // Clear the previous highlight on the enemy board
                foreach (var enemyRow in EnemyCells)
                {
                    foreach (var enemyCell in enemyRow)
                    {
                        enemyCell.IsHighlighted = false;
                    }
                }

                // Highlight the new cell
                var cellToHighlight = EnemyCells[row][col];
                cellToHighlight.IsHighlighted = true;

                InvokeAsync(StateHasChanged);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive the result of the shoot on enemy board
            PlayerState.HubConnection.On<int, int, string>("ReceiveShootResult", async (row, col, result) =>
            {
                await HandleShootResult(row, col, result);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive the result of the shoot on team board from enemy
            PlayerState.HubConnection.On<int, int, string>("ReceiveTeamHitResult", async (row, col, result) =>
            {
                await HandleTeamHitResult(row, col, result);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive the game over message
            PlayerState.HubConnection.On<string>("ReceiveGameOver", async (message) =>
            {
                await HandleGameOver(message);
            });

            // Add new handlers
            PlayerState.HubConnection.On<string>("ReceiveTeamStrategy", (strategy) =>
            {
                selectedStrategy = strategy;
                hasSelectedStrategy = true;
                StateHasChanged();
            });

            PlayerState.HubConnection.On("StartBattle", () =>
            {
                battleStarted = true;
                StateHasChanged();
            });
        }
    }

    private async Task ToggleEnemyHighlight(GridCell cell)
    {
        if (!isPlayerTurn || cell == null) return; // Add check for player turn

        // Prevent selecting a cell that has already been attacked
        if (cell.State == Square.Hit || cell.State == Square.Miss)
        {
            return; // Do nothing if the cell has already been shot at
        }

        // Clear previous highlights
        foreach (var enemyRow in EnemyCells)
        {
            foreach (var enemyCell in enemyRow)
            {
                enemyCell.IsHighlighted = false;
            }
        }

        // Highlight the selected cell and store the coordinates
        cell.IsHighlighted = true;
        selectedRow = cell.Row;
        selectedCol = cell.Col;

        // Update the server so teammates are informed
        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("HighlightBlockForTeam", cell.Row, cell.Col);
        }

        StateHasChanged();
    }

    private async Task ShootAtOpponentBoard()
    {
        if (!isPlayerTurn) return; // Check if it's the player's turn

        if (selectedRow.HasValue && selectedCol.HasValue && selectedShot != null)
        {
            if (IsHubConnectionActive())
            {
                // Step 1: Use ShotBuilder to configure a base shot
                var shotBuilder = new ShotBuilder()
                    .SetName(selectedShot)
                    .SetSpread(new List<(int, int)> { (0, 0) });  // Basic single shot spread

                IShot shot = shotBuilder.Build();

                // Step 2: Apply SplashDamageDecorator if selectedShot has splash effect
                if (selectedShot == "Slasher")  // Example: Slasher shot has splash effect
                {
                    shot = new SplashDamageDecorator(shot, splashRadius: 1); // Adjust splash radius as needed
                }

                // Step 3: Calculate final shot coordinates from the decorated shot
                var shotCoordinates = shot.ShotCoordinates(selectedRow.Value, selectedCol.Value);

                // Step 4: Execute ShotCommand for each coordinate in the decorated shot
                foreach (var (x, y) in shotCoordinates)
                {
                    if (x >= 0 && y >= 0 && x < EnemyCells.Count && y < EnemyCells[x].Count)
                    {
                        var shotCommand = new ShotCommand(x, y, selectedShot, true);
                        CommandInvoker.ExecuteCommand(shotCommand, EnemyCells);
                    }
                }

                // Step 5: Send the original shot to the server for synchronization (if needed)
                await PlayerState.HubConnection.SendAsync("ShootAtOpponent", selectedRow.Value, selectedCol.Value, selectedShot);

                isPlayerTurn = false; // End player's turn
            }
        }
        else
        {
            Console.WriteLine("No cell selected to shoot at.");
        }
    }



    // Modify HandleShootResult to execute the shot from enemy's perspective
    private async Task HandleShootResult(int row, int col, string result)
    {
        var shotCommand = new ShotCommand(row, col, result, false);
        CommandInvoker.ExecuteCommand(shotCommand, EnemyCells);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleTeamHitResult(int row, int col, string result)
    {
        var cell = TeamCells[row][col];
        if (result == "hit")
        {
            cell.State = Square.Hit;
        }
        else if (result == "miss")
        {
            cell.State = Square.Miss;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleGameOver(string message)
    {
        gameOverMessage = message;

        await InvokeAsync(StateHasChanged);
    }

    private bool IsHubConnectionActive() => PlayerState.HubConnection is not null;

    private async Task ConfirmStrategy()
    {
        if (IsHubConnectionActive() && isTeamLeader)  // Only team leaders can set strategy
        {
            await PlayerState.HubConnection.SendAsync("ConfirmTeamStrategy", selectedStrategy);
            hasSelectedStrategy = true;
            StateHasChanged();
        }
    }

    private async Task ReadyForBattle()
    {
        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("PlayerReadyForBattle");
            isReadyForBattle = true;
            StateHasChanged();
        }
    }
}