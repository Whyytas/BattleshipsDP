@using BattleshipsDP.Client.State
@using SharedLibrary
@using SharedLibrary.Composite;
@using SharedLibrary.Visitor
@page "/battle"

@inject PlayerState PlayerState
@inject NavigationManager Navigation
@inject TeamAStatisticsVisitor teamAStatisticsVisitor
@inject TeamBStatisticsVisitor teamBStatisticsVisitor
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<style>
    .flash-ship {
        animation: flashShip 1s infinite;
    }

    @@keyframes flashShip {
        0% {
            background-color: #90EE90;
        }

        50% {
            background-color: #32CD32;
        }

        100% {
            background-color: #90EE90;
        }
    }
</style>

@if (PlayerState.HubConnection is not null && gameStateContext is not null)
{
    <h2>@gameStateContext.GetMessage()</h2>
    @if (!string.IsNullOrEmpty(WinnerTeam))
    {
        <h1 style="color: green;">@WinnerTeam Wins!</h1>
    }

    @if (PlayerState.HubConnection is not null)
    {
        <div style="margin-top: 20px; padding: 10px; border: 1px solid black;">
            <h2>Team A Statistics</h2>
            <p><strong>Total Hits:</strong> @teamAStatisticsVisitor.Hits</p>
            <p><strong>Total Misses:</strong> @teamAStatisticsVisitor.Misses</p>
            <p><strong>Total Player Actions:</strong> @teamAStatisticsVisitor.PlayerActions</p>

            <h2>Team B Statistics</h2>
            <p><strong>Total Hits:</strong> @teamBStatisticsVisitor.Hits</p>
            <p><strong>Total Misses:</strong> @teamBStatisticsVisitor.Misses</p>
            <p><strong>Total Player Actions:</strong> @teamBStatisticsVisitor.PlayerActions</p>
        </div>

        <h2>Game Controls</h2>
        <button @onclick="StopGame">Stop</button>
        <button @onclick="PlayGame" disabled="@(!isGameStopped)">Play</button>

        <div>
            <h3>Player Information</h3>
            <p>Name: @PlayerName</p>
            <p>Connection ID: @PlayerState.HubConnection.ConnectionId</p>
            <p>Team: @PlayerTeam</p>
            @if (isPlayerTurn)
            {
                <h2 style="color: blue;">Your turn!</h2>
            }
        </div>
    }

    @if (!battleStarted)
    {
        <div class="setup-phase" style="margin: 20px 0;">
            @if (isTeamLeader && !hasSelectedStrategy)
            {
                <div>
                    <h3>Select Team Strategy</h3>
                    <select @bind="selectedStrategy">
                        <option value="Random">Random Placement</option>
                        <option value="Edge">Edge Placement</option>
                        <option value="Spaced">Spaced Placement</option>
                    </select>
                    <button @onclick="ConfirmStrategy" disabled="@(!gameStateContext.CanPerformAction("ConfirmStrategy"))">Confirm Strategy</button>

                </div>
            }
            @if (!isReadyForBattle)
            {
                <div style="margin-top: 10px;">
                    @if (hasSelectedStrategy)
                    {
                        <p>Selected Strategy: @selectedStrategy</p>
                    }
                    <button @onclick="ReadyForBattle" disabled="@(!gameStateContext.CanPerformAction("ReadyForBattle"))">Ready for Battle</button>
                </div>
            }
            else
            {
                <p>Waiting for other players...</p>
            }
        </div>
    }

    <div style="display: flex; gap: 50px;">
        <!-- Team Board -->
        <div>
            <h3>Team Board (@PlayerTeam)</h3>
            <div style="margin-left: 30px;">
                <!-- Column headers (1-boardSize) -->
                <div style="display: flex; margin-left: 15px;">
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @for (int i = 1; i <= boardSize; i++)
                        {
                            <div style="text-align: center;">@i</div>
                        }
                    </div>
                </div>
                <!-- Game grid with row headers -->
                <div style="display: flex;">
                    <!-- Row headers (A-[dynamic end letter]) -->
                    <div style="display: grid; grid-template-rows: repeat(@boardSize, 50px); grid-gap: 5px; margin-right: 5px;">
                        @for (int i = 0; i < boardSize; i++)
                        {
                            <div style="height: 50px; display: flex; align-items: center;">
                                @(Convert.ToChar('A' + i))
                            </div>
                        }
                    </div>
                    <!-- Board cells -->
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @foreach (var row in TeamCells)
                        {
                            @foreach (var cell in row)
                            {
                                <div class="@(showInfo && cell.IsSelectedShip ? "flash-ship" : "")"
                                     style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (battleStarted)
        {
            <div>
                <label for="selectedShot">Choose a Shot:</label>
                <select @bind="selectedShot" id="selectedShot" name="selectedShot" disabled="@(!isPlayerTurn)">
                    <option value="Simple">Simple shot</option>
                    <option value="Big" disabled="@(!IsBigAvailable)">Big shot (@BigAmount)</option>
                    <option value="Piercer" disabled="@(!IsPiercerAvailable)">Piercer shot (@PiercerAmount)</option>
                    <option value="Slasher" disabled="@(!IsSlasherAvailable)">Slasher shot(@SlasherAmount)</option>
                    <option value="Cross" disabled="@(!IsCrossAvailable)">Cross shot (@CrossAmount)</option>
                </select>
                <p>@(gameStateContext.CanPerformAction("Wait") ? "Waiting for your turn..." : "")</p>
                <button @onclick="ShootAtOpponentBoard" disabled="@(!isPlayerTurn && !gameStateContext.CanPerformAction("Shoot"))">Fire</button>
            </div>
        }

        <!-- Enemy Board -->
        <div>
            <h3>Enemy Board</h3>
            <div style="margin-left: 30px;">
                <!-- Column headers (1-boardSize) for enemy board -->
                <div style="display: flex; margin-left: 15px;">
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @for (int i = 1; i <= boardSize; i++)
                        {
                            <div style="text-align: center;">@i</div>
                        }
                    </div>
                </div>
                <!-- Game grid with row headers -->
                <div style="display: flex;">
                    <!-- Row headers (A-[dynamic end letter]) -->
                    <div style="display: grid; grid-template-rows: repeat(@boardSize, 50px); grid-gap: 5px; margin-right: 5px;">
                        @for (int i = 0; i < boardSize; i++)
                        {
                            <div style="height: 50px; display: flex; align-items: center;">
                                @(Convert.ToChar('A' + i))
                            </div>
                        }
                    </div>
                    <!-- Board cells -->
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @foreach (var row in EnemyCells)
                        {
                            @foreach (var cell in row)
                            {
                                <div @onclick="() => ToggleEnemyHighlight(cell)"
                                     style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            <h3>Shot History</h3>
            <ul>
                @foreach (var command in CommandInvoker.GetHistory())
                {
                    <li>Shot at (@command.Row, @command.Col) - Type: @command.ShotType - @(command.IsPlayerShot ? "Player" : "Enemy")</li>
                }
            </ul>
        </div>

        <!-- Replace the ship counts section -->
        <div>
            <select @bind="selectedInfoType" @bind:after="HighlightSelectedShips">
                <option value="">Select Information</option>
                <option value="navy">Entire Navy</option>
                <optgroup label="Ship Categories">
                    <option value="destroyers">Destroyers</option>
                    <option value="submarines">Submarines</option>
                    <option value="battleships">Battleships</option>
                    <option value="carriers">Carriers</option>
                </optgroup>
                <optgroup label="Individual Ships">
                    @if (shipCounts != null)
                    {
                        @foreach (var shipType in shipCounts)
                        {
                            @for (int i = 1; i <= shipType.Value; i++)
                            {
                                <option value="@($"{shipType.Key.ToLower()}-{i}")">@shipType.Key #@i</option>
                            }
                        }
                    }
                </optgroup>
            </select>
            <button @onclick="ToggleInfoDisplay">
                @(showInfo ? "Hide Information" : "Show Information")
            </button>
            @if (showInfo && !string.IsNullOrEmpty(selectedInfoType))
            {
                <div class="ship-counts">
                    <h4>Team @PlayerTeam Ships:</h4>
                    @if (shipCounts != null)
                    {
                        @if (selectedInfoType == "navy")
                        {
                            @foreach (var count in shipCounts)
                            {
                                <p>@count.Key: @count.Value</p>
                            }
                        }
                        else if (selectedInfoType.Contains("-"))
                        {
                            var parts = selectedInfoType.Split('-');
                            var shipType = parts[0];
                            var shipNumber = parts[1];
                            if (selectedShipStatus != null)
                            {
                                <div class="ship-status">
                                    <p>@shipType #@shipNumber Status:</p>
                                    <p>Location: @selectedShipStatus.LocationInfo</p>
                                    <p>Health: @selectedShipStatus.Health/@selectedShipStatus.MaxHealth</p>
                                    <p>Status: @(selectedShipStatus.IsActive ? "Active" : "Destroyed")</p>
                                </div>
                            }
                        }
                        else
                        {
                            var filteredShips = shipCounts.Where(s => s.Key.ToLower().Contains(selectedInfoType.TrimEnd('s')));
                            foreach (var ship in filteredShips)
                            {
                                <p>@ship.Key: @ship.Value</p>
                            }
                        }
                    }
                </div>
            }
        </div>
    </div>

    @if (!string.IsNullOrEmpty(gameOverMessage))
    {
        <div style="padding: 20px; background-color: lightgreen; border: 2px solid green; font-weight: bold;">
            @gameOverMessage
        </div>
    }
}

@code {
    private int boardSize; // Initialize to a default, can be modified based on user input

    private string PlayerName { get; set; } = string.Empty;
    private string PlayerTeam { get; set; } = string.Empty;
    private string WinnerTeam { get; set; } = string.Empty;
    private int? selectedRow = null;
    private int? selectedCol = null;
    private string selectedShot = "Simple";
    private bool isPlayerTurn = false;
    private string gameOverMessage = string.Empty;
    private bool isTeamLeader = false;
    private string selectedStrategy = "Random";
    private bool hasSelectedStrategy = false;
    private bool isReadyForBattle = false;
    private bool battleStarted = false;
    private bool IsBigAvailable = false;
    private bool IsSlasherAvailable = false;
    private bool IsPiercerAvailable = false;
    private bool IsCrossAvailable = false;
    private int? BigAmount = null;
    private int? PiercerAmount = null;
    private int? SlasherAmount = null;
    private int? CrossAmount = null;
    private GameStateContext gameStateContext;

    private List<List<GridCell>> TeamCells = new List<List<GridCell>>();
    private List<List<GridCell>> EnemyCells = new List<List<GridCell>>();

    private CommandInvoker CommandInvoker = new CommandInvoker();

    private GameState gameState;
    private GameStateMemento savedState;
    private bool isGameStopped = false;


    private async Task StopGame()
    {
        // Save the game state
        gameState = new GameState(TeamCells, EnemyCells, isPlayerTurn, PlayerState.HubConnection.ConnectionId);
        savedState = gameState.SaveState();
        isGameStopped = true;

        Console.WriteLine("Game state saved.");
    }

    private async Task PlayGame()
    {
        if (savedState != null)
        {
            // Restore the game state
            gameState.RestoreState(savedState);
            TeamCells = gameState.TeamCells;
            EnemyCells = gameState.EnemyCells;
            isPlayerTurn = gameState.IsPlayerTurn;

            isGameStopped = false;
            Console.WriteLine("Game state restored.");
            StateHasChanged();
        }
    }

    private List<List<GridCell>> InitializeGrid()
    {
        var grid = new List<List<GridCell>>();
        for (int i = 0; i < 10; i++)
        {
            var row = new List<GridCell>();
            for (int j = 0; j < 10; j++)
            {
                // Use the Flyweight factory to create or retrieve GridCell instances
                row.Add(GridCell.Create(i, j, Square.Empty));
            }
            grid.Add(row);
        }
        return grid;
    }


    // Replace the showShipCounts field with this
    private string selectedInfoType = "";

    // Add these new fields
    private Dictionary<string, int>? shipCounts;
    private bool showInfo = false;
    private ShipStatus? selectedShipStatus;

    // Add this class inside the @code block
    private class ShipStatus
    {
        public string LocationInfo { get; set; }
        public int Health { get; set; }
        public int MaxHealth { get; set; }
        public bool IsActive { get; set; }
    }

    private async Task ToggleInfoDisplay()
    {
        if (!showInfo)
        {
            showInfo = true;
            if (PlayerState.HubConnection != null)
            {
                shipCounts = await PlayerState.HubConnection.InvokeAsync<Dictionary<string, int>>("GetShipCounts", PlayerState.HubConnection.ConnectionId);
                await HighlightSelectedShips(); // Only highlight when showing info
            }
        }
        else
        {
            showInfo = false;
            // Reset all cells' IsSelectedShip property when hiding info
            foreach (var row in TeamCells)
            {
                foreach (var cell in row)
                {
                    cell.IsSelectedShip = false;
                }
            }
        }

        StateHasChanged();
    }

    private async Task HighlightSelectedShips()
    {
        if (PlayerState.HubConnection != null && !string.IsNullOrEmpty(selectedInfoType) && showInfo)
        {
            // Reset all cells
            foreach (var row in TeamCells)
            {
                foreach (var cell in row)
                {
                    cell.IsSelectedShip = false;
                }
            }

            try
            {
                var shipCoordinates = await PlayerState.HubConnection.InvokeAsync<List<int[]>>(
                    "GetShipCoordinates",
                    PlayerState.HubConnection.ConnectionId,
                    selectedInfoType
                );

                // If viewing a specific ship, get its status
                if (selectedInfoType.Contains("-"))
                {
                    var status = await PlayerState.HubConnection.InvokeAsync<ShipStatus>(
                        "GetShipStatus",
                        PlayerState.HubConnection.ConnectionId,
                        selectedInfoType
                    );
                    selectedShipStatus = status;
                }
                else
                {
                    selectedShipStatus = null;
                }

                Console.WriteLine($"Received {shipCoordinates.Count} coordinates to highlight");
                foreach (var coord in shipCoordinates)
                {
                    int row = coord[0];
                    int col = coord[1];
                    Console.WriteLine($"Processing coordinate: ({row}, {col})");
                    if (row >= 0 && row < TeamCells.Count &&
                        col >= 0 && col < TeamCells[row].Count)
                    {
                        TeamCells[row][col].IsSelectedShip = true;
                        Console.WriteLine($"Set IsSelectedShip=true for cell at ({row}, {col})");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error highlighting ships: {ex.Message}");
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    // Also add a handler for when the selection changes
    private async Task OnInfoTypeChanged(ChangeEventArgs e)
    {
        selectedInfoType = e.Value?.ToString() ?? "";
        if (showInfo)
        {
            await HighlightSelectedShips();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (PlayerState.HubConnection != null)
        {
            // Initialize game data here
            TeamCells = InitializeGrid();
            EnemyCells = InitializeGrid();
        }
        if (IsHubConnectionActive())
        {
            gameStateContext = new GameStateContext(new PreparationState());
            boardSize = await PlayerState.HubConnection.InvokeAsync<int>("GetBoardSize", PlayerState.HubConnection.ConnectionId);
            InitializeBoards();
            if (PlayerState.HubConnection.State == HubConnectionState.Disconnected)
            {
                await PlayerState.HubConnection.StartAsync();
            }

            await PlayerState.HubConnection.SendAsync("PlayerReady");

            PlayerState.HubConnection.On<string, string, string, bool>("ReceivePlayerInfo", (name, connectionId, team, isLeader) =>
            {
                PlayerName = name;
                PlayerTeam = team;
                isTeamLeader = isLeader;
                StateHasChanged();
            });

            PlayerState.HubConnection.On("YourTurn", () =>
            {
                gameStateContext.SetState(new YourTurnState());
                isPlayerTurn = true;
                StateHasChanged();
            });

            PlayerState.HubConnection.On("NotYourTurn", () =>
            {
                gameStateContext.SetState(new WaitingState());
                isPlayerTurn = false;
                InvokeAsync(StateHasChanged);
            });

            PlayerState.HubConnection.On<List<List<Square>>>("ReceiveBoardInfo", (receivedCells) =>
    {
        Console.WriteLine("Initializing board with received cells");
        TeamCells = new List<List<GridCell>>();

        for (int row = 0; row < receivedCells.Count; row++)
        {
            var newRow = new List<GridCell>();
            for (int col = 0; col < receivedCells[row].Count; col++)
            {
                // Use the Flyweight factory to create or retrieve a GridCell instance
                var cell = GridCell.Create(row, col, receivedCells[row][col]);
                Console.WriteLine($"Cell at ({row}, {col}) has state: {cell.State}");
                newRow.Add(cell);
            }
            TeamCells.Add(newRow);
        }

        InvokeAsync(StateHasChanged);
    });

            PlayerState.HubConnection.On<int, int>("ReceiveBlockHighlight", (row, col) =>
            {
                // Clear highlights from the enemy grid
                foreach (var enemyRow in EnemyCells)
                {
                    foreach (var enemyCell in enemyRow)
                    {
                        enemyCell.IsHighlighted = false;
                    }
                }

                // Highlight the specified cell on the enemy board
                EnemyCells[row][col].IsHighlighted = true;

                InvokeAsync(StateHasChanged);
            });


            PlayerState.HubConnection.On<int>("ReceiveBigAmount", async (amount) =>
            {
                await HandleBigAmount(amount);
            });
            PlayerState.HubConnection.On<int>("ReceivePiercerAmount", async (amount) =>
            {
                await HandlePiercerAmount(amount);
            });
            PlayerState.HubConnection.On<int>("ReceiveSlasherAmount", async (amount) =>
            {
                await HandleSlasherAmount(amount);
            });
            PlayerState.HubConnection.On<int>("ReceiveCrossAmount", async (amount) =>
            {
                await HandleCrossAmount(amount);
            });

            PlayerState.HubConnection.On<int, int, string>("ReceiveShootResult", async (row, col, result) =>
            {
                await HandleShootResult(row, col, result);
            });

            PlayerState.HubConnection.On<int, int, string>("ReceiveTeamHitResult", async (row, col, result) =>
            {
                await HandleTeamHitResult(row, col, result);
            });

            PlayerState.HubConnection.On<string>("ReceiveGameOver", async (message) =>
            {
                gameStateContext.SetState(new GameOverState(message));
                await HandleGameOver(message);
            });

            PlayerState.HubConnection.On<string>("ReceiveTeamStrategy", (strategy) =>
            {
                selectedStrategy = strategy;
                hasSelectedStrategy = true;
                StateHasChanged();
            });

            PlayerState.HubConnection.On("StartBattle", () =>
            {
                battleStarted = true;
                gameStateContext.SetState(new WaitingState());
                StateHasChanged();
            });
        }
    }

    private void InitializeBoards()
    {
        TeamCells.Clear();
        EnemyCells.Clear();

        for (int row = 0; row < boardSize; row++)
        {
            var teamRow = new List<GridCell>();
            var enemyRow = new List<GridCell>();
            for (int col = 0; col < boardSize; col++)
            {
                // Create independent GridCell instances
                teamRow.Add(new GridCell { Row = row, Col = col });
                enemyRow.Add(new GridCell { Row = row, Col = col });
            }
            TeamCells.Add(teamRow);
            EnemyCells.Add(enemyRow);
        }
    }


    private async Task ToggleEnemyHighlight(GridCell cell)
    {
        if (!isPlayerTurn || cell == null) return;

        // Ignore if the cell is already hit or missed
        if (cell.State == Square.Hit || cell.State == Square.Miss)
        {
            return;
        }

        // Reset all highlights on the enemy board
        foreach (var enemyRow in EnemyCells)
        {
            foreach (var enemyCell in enemyRow)
            {
                enemyCell.IsHighlighted = false;
            }
        }

        // Highlight the selected cell on the enemy board
        cell.IsHighlighted = true;

        selectedRow = cell.Row;
        selectedCol = cell.Col;

        // Notify other players about the selected cell if connection is active
        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("HighlightBlockForTeam", cell.Row, cell.Col);
        }

        StateHasChanged();
    }



    private async Task ShootAtOpponentBoard()
    {
        if (!isPlayerTurn) return;
        if (gameStateContext.CanPerformAction("Shoot"))
        {
            if (selectedRow.HasValue && selectedCol.HasValue && selectedShot != null)
            {
                if (IsHubConnectionActive())
                {
                    //var shotBuilder = new ShotBuilder()
                    //    .SetName(selectedShot)
                    //    .SetSpread(new List<(int, int)> { (0, 0) });
                    //
                    //IShot shot = shotBuilder.Build();
                    //
                    //if (selectedShot == "Slasher")
                    //{
                    //    shot = new SplashDamageDecorator(shot, splashRadius: 1);
                    //}
                    //
                    //var shotCoordinates = shot.ShotCoordinates(selectedRow.Value, selectedCol.Value);
                    //
                    //foreach (var (x, y) in shotCoordinates)
                    //{
                    //    if (x >= 0 && y >= 0 && x < EnemyCells.Count && y < EnemyCells[x].Count)
                    //    {
                    //        var shotCommand = new ShotCommand(x, y, selectedShot, true);
                    //        CommandInvoker.ExecuteCommand(shotCommand, EnemyCells);
                    //    }
                    //}

                    await PlayerState.HubConnection.SendAsync("ShootAtOpponent", selectedRow.Value, selectedCol.Value, selectedShot);

                    isPlayerTurn = false;
                }
            }
            else
            {
                Console.WriteLine("No cell selected to shoot at.");
            }
        }
        else return;
    }

    private async Task HandleShootResult(int row, int col, string result)
    {
        // Target only the enemy board
        var cell = EnemyCells[row][col];
        if (result == "hit")
        {
            cell.State = Square.Hit;
        }
        else if (result == "miss")
        {
            cell.State = Square.Miss;
        }

        await InvokeAsync(StateHasChanged);
    }


    private async Task HandleTeamHitResult(int row, int col, string result)
    {
        // Update only the player's grid (TeamCells)
        var cell = TeamCells[row][col];
        if (result == "hit")
        {
            cell.State = Square.Hit;
        }
        else if (result == "miss")
        {
            cell.State = Square.Miss;
        }

        await InvokeAsync(StateHasChanged);
    }



    private async Task HandleGameOver(string message)
    {
        gameOverMessage = message;

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleBigAmount(int amount)
    {
        BigAmount = amount;
        if (amount > 0)
        {
            IsBigAvailable = true;
        }
        else
        {
            IsBigAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandlePiercerAmount(int amount)
    {
        PiercerAmount = amount;
        if (amount > 0)
        {
            IsPiercerAvailable = true;
        }
        else
        {
            IsPiercerAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSlasherAmount(int amount)
    {
        SlasherAmount = amount;
        if (amount > 0)
        {
            IsSlasherAvailable = true;
        }
        else
        {
            IsSlasherAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleCrossAmount(int amount)
    {
        CrossAmount = amount;
        if (amount > 0)
        {
            IsCrossAvailable = true;
        }
        else
        {
            IsCrossAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private bool IsHubConnectionActive() => PlayerState.HubConnection is not null;

    private async Task ConfirmStrategy()
    {
        if (IsHubConnectionActive() && isTeamLeader)
        {
            await PlayerState.HubConnection.SendAsync("ConfirmTeamStrategy", selectedStrategy);
            hasSelectedStrategy = true;
            StateHasChanged();
        }
    }

    private async Task ReadyForBattle()
    {
        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("PlayerReadyForBattle");
            isReadyForBattle = true;
            StateHasChanged();
        }
    }
}