@page "/battle"
@using SharedLibrary
@inject PlayerState PlayerState
@inject NavigationManager Navigation
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@if (PlayerState.HubConnection is not null)
{
    @if (!string.IsNullOrEmpty(WinnerTeam))
    {
        <h1 style="color: green;">@WinnerTeam Wins!</h1>
    }

    <div>
        <h3>Player Information</h3>
        <p>Name: @PlayerName</p>
        <p>Connection ID: @PlayerConnectionId</p>
        <p>Team: @PlayerTeam</p>
        @if (isPlayerTurn)
        {
            <h2 style="color: blue;">Your turn!</h2>
        }
      
    </div>
    <div style="display: flex; gap: 50px;">
        <!-- Team Board -->
        <div>
            <h3>Team Board (@PlayerTeam)</h3>
            <div style="display: grid; grid-template-columns: repeat(10, 50px); grid-gap: 5px;">
                @foreach (var row in TeamCells)
                {
                    @foreach (var cell in row)
                    {
                        <div style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                        </div>
                    }
                }
            </div>
        </div>
        <div>
            <label for="selectedShot">Choose a Shot:</label>
            <select @bind="selectedShot" id="selectedShot" name="selectedShot">
                <option value="Simple">Simple shot</option>
                <option value="Big">Big shot</option>
                <option value="Piercer">Piercer shot</option>
                <option value="Slasher">Slasher shot</option>
                <option value="Cross">Cross shot</option>
            </select>
        </div>
        <div>
            <!-- Compare Button -->
            <button @onclick="ShootAtOpponentBoard">Fire</button>
        </div>
        

        <!-- Enemy Board -->
        <div>
            <h3>Enemy Board</h3>
            <div style="display: grid; grid-template-columns: repeat(10, 50px); grid-gap: 5px;">
                @foreach (var row in EnemyCells)
                {
                    @foreach (var cell in row)
                    {
                        <div @onclick="() => ToggleEnemyHighlight(cell)"
                             style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(gameOverMessage))
    {
        <div style="padding: 20px; background-color: lightgreen; border: 2px solid green; font-weight: bold;">
            @gameOverMessage
        </div>
    }

}

@code {
    private string PlayerName { get; set; } = string.Empty;
    private string PlayerConnectionId { get; set; } = string.Empty;
    private string PlayerTeam { get; set; } = string.Empty;
    private string WinnerTeam { get; set; } = string.Empty;
    private int? selectedRow = null;
    private int? selectedCol = null;
    private string selectedShot = "Simple";
    private bool isPlayerTurn = false;
    private string gameOverMessage = string.Empty;

    private List<List<GridCell>> TeamCells = new List<List<GridCell>>();
    private List<List<GridCell>> EnemyCells = new List<List<GridCell>>();

    protected override async Task OnInitializedAsync()
    {
        // Initialize both boards (10x10 grid each)
        for (int row = 0; row < 10; row++)
        {
            var teamRow = new List<GridCell>();
            var enemyRow = new List<GridCell>();
            for (int col = 0; col < 10; col++)
            {
                teamRow.Add(new GridCell { Row = row, Col = col });
                enemyRow.Add(new GridCell { Row = row, Col = col });
            }
            TeamCells.Add(teamRow);
            EnemyCells.Add(enemyRow);
        }

        if (PlayerState.HubConnection is not null)
        {
            if (PlayerState.HubConnection.State == HubConnectionState.Disconnected)
            {
                await PlayerState.HubConnection.StartAsync();
            }

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive player info from the server
            PlayerState.HubConnection.On<string, string, string>("ReceivePlayerInfo", (name, connectionId, team) =>
            {
                PlayerName = name;
                PlayerConnectionId = connectionId;
                PlayerTeam = team;

                Console.WriteLine($"Received player info: Name={name}, ConnectionID={connectionId}, Team={team}");
                InvokeAsync(StateHasChanged);
            });

            PlayerState.HubConnection.On("YourTurn", () =>
            {
                Console.WriteLine("It's my turn now!"); // Browser test
                isPlayerTurn = true;  // Rodome žinutę „Your turn“
                StateHasChanged();
            });

            PlayerState.HubConnection.On("NotYourTurn", () =>
            {
                isPlayerTurn = false;  
                InvokeAsync(StateHasChanged);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive board info from the server
            PlayerState.HubConnection.On<List<List<Square>>>("ReceiveBoardInfo", (receivedCells) =>
            {
                // Update TeamCells with the received board state
                TeamCells = receivedCells.Select(row => row.Select(cell => new GridCell
                    {
                        State = cell,
                        Row = receivedCells.IndexOf(row),
                        Col = row.IndexOf(cell)
                    }).ToList()).ToList();
                InvokeAsync(StateHasChanged);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            PlayerState.HubConnection.On<int, int>("ReceiveBlockHighlight", (row, col) =>
            {
                // Clear the previous highlight on the enemy board
                foreach (var enemyRow in EnemyCells)
                {
                    foreach (var enemyCell in enemyRow)
                    {
                        enemyCell.IsHighlighted = false;
                    }
                }

                // Highlight the new cell
                var cellToHighlight = EnemyCells[row][col];
                cellToHighlight.IsHighlighted = true;

                InvokeAsync(StateHasChanged);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive the result of the shoot on enemy board
            PlayerState.HubConnection.On<int, int, string>("ReceiveShootResult", async (row, col, result) =>
            {
                await HandleShootResult(row, col, result);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive the result of the shoot on team board from enemy
            PlayerState.HubConnection.On<int, int, string>("ReceiveTeamHitResult", async (row, col, result) =>
            {
                await HandleTeamHitResult(row, col, result);
            });

            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Receive the game over message
            PlayerState.HubConnection.On<string>("ReceiveGameOver", async (message) =>
            {
                await HandleGameOver(message);
            });



            // Notify the server that this player is ready
            await PlayerState.HubConnection.SendAsync("PlayerReady");
        
        }
    }

    private async Task ToggleEnemyHighlight(GridCell cell)
    {
        if (cell == null) return;

        // Prevent selecting a cell that has already been attacked
        if (cell.State == Square.Hit || cell.State == Square.Miss)
        {
            return; // Do nothing if the cell has already been shot at
        }

        // Clear previous highlights
        foreach (var enemyRow in EnemyCells)
        {
            foreach (var enemyCell in enemyRow)
            {
                enemyCell.IsHighlighted = false;
            }
        }

        // Highlight the selected cell and store the coordinates
        cell.IsHighlighted = true;
        selectedRow = cell.Row;
        selectedCol = cell.Col;

        // Update the server so teammates are informed
        if (PlayerState.HubConnection is not null)
        {
            await PlayerState.HubConnection.SendAsync("HighlightBlockForTeam", cell.Row, cell.Col);
        }

        StateHasChanged();
    }

    private async Task ShootAtOpponentBoard()
    {
        if (selectedRow.HasValue && selectedCol.HasValue && selectedShot != null)
        {
            if (PlayerState.HubConnection is not null)
            {
                await PlayerState.HubConnection.SendAsync("ShootAtOpponent", selectedRow.Value, selectedCol.Value, selectedShot);
                isPlayerTurn = false;
            }
        }
        else
        {
            Console.WriteLine("No cell selected to compare.");
        }
    }

    private async Task HandleShootResult(int row, int col, string result)
    {
        var cell = EnemyCells[row][col];
        if (result == "hit")
        {
            cell.State = Square.Hit;
        }
        else if (result == "miss")
        {
            cell.State = Square.Miss;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleTeamHitResult(int row, int col, string result)
    {
        var cell = TeamCells[row][col];
        if (result == "hit")
        {
            cell.State = Square.Hit;
        }
        else if (result == "miss")
        {
            cell.State = Square.Miss;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleGameOver(string message)
    {
        gameOverMessage = message;

        await InvokeAsync(StateHasChanged);
    }
}