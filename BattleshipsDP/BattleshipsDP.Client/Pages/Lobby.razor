@page "/"

@inject NavigationManager NavigationManager
@inject PlayerState PlayerState
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@code {
    private List<GameRoom> rooms = new();

    private string playerName = string.Empty;
    private bool userNameValid = false;

    private string currentRoomName = string.Empty;
    private bool roomNameValid = false;

    private GameRoom? currentRoom;

    // New difficulty level selection
    private string selectedDifficulty = string.Empty;
    private bool difficultySelected = false;
}


<div class="container">

    @if (!userNameValid)
    {
        <h3>Welcome to Battleships Game</h3>
        <div class="form-group">
            <input class="input-field" @bind="playerName" placeholder="Your Name" />
        </div>
        <div class="form-group">
            <button class="btn validate-btn" @onclick="CheckPlayer">Enter name</button>
        </div>
        <p class="validation-message">Please enter a valid username to proceed.</p>
    }
    else
    {
        <h1>Hello, @playerName!</h1>
        <h3>To continue, create or join a room!</h3>

        <!-- Room name input -->
        <div class="form-group">
            <input class="input-field" @bind="currentRoomName" placeholder="Room Name" />
        </div>

        <!-- Difficulty selection dropdown -->
        <div class="form-group">
            <select class="input-field" @bind="selectedDifficulty">
                <option value="">Select Difficulty</option>
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
            </select>
        </div>

        <!-- Create Room button -->
        <div class="form-group">
            <button class="btn" @onclick="CreateRoom">Create Room</button>
        </div>

        <!-- Validation messages for room name and difficulty -->
        @if (!roomNameValid)
        {
            <p class="validation-message">Room name cannot be empty!</p>
        }
        @if (!difficultySelected)
        {
            <p class="validation-message">Please select a difficulty level!</p>
        }

        <h3>Rooms:</h3>
        <ul class="room-list">
            @foreach (var room in rooms)
            {
                <li>
                    @room.RoomName @room.Players.Count/4 <button class="btn" @onclick="() => JoinRoom(room.RoomId)">
                        Join Room
                    </button>
                </li>
            }
        </ul>
    }
</div>

<style>
    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        text-align: center;
    }

    .form-group {
        margin: 15px 0;
    }

    .input-field {
        padding: 10px;
        width: 300px;
        border: 2px solid #ddd;
        border-radius: 5px;
    }

    .btn {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .room-list {
        list-style-type: none;
        padding: 0;
    }

        .room-list li {
            margin: 10px 0;
        }

    .validation-message {
        color: red;
        font-size: 14px;
    }

    .validate-btn {
        background-color: #007bff;
    }

        .validate-btn:hover {
            background-color: #218838;
        }
</style>

@code {
    protected override async Task OnInitializedAsync()
    {
        await PlayerState.InitializeHubConnection("/gamehub", NavigationManager);

        PlayerState.HubConnection?.On<List<GameRoom>>("Rooms", (roomList) =>
        {
            Console.WriteLine($"We got rooms! Counts = {roomList.Count}");
            rooms = roomList;
            StateHasChanged();
        });
    }

    private async Task CreateRoom()
    {
        if (!IsHubConnectionActive()) return;

        // Validate room name and difficulty selection
        roomNameValid = !string.IsNullOrEmpty(currentRoomName);
        difficultySelected = !string.IsNullOrEmpty(selectedDifficulty);

        if (roomNameValid && difficultySelected)
        {
            // Create room with selected difficulty
            currentRoom = await PlayerState.HubConnection.InvokeAsync<GameRoom>(
                "CreateRoom", currentRoomName, playerName, selectedDifficulty);
            await NavigateToRoom(currentRoom.RoomId);
        }

        StateHasChanged();
    }

    private async Task JoinRoom(string roomId)
    {
        if (!IsHubConnectionActive()) return;

        var joinedRoom = await PlayerState.HubConnection.InvokeAsync<GameRoom>(
            "JoinRoom", roomId, playerName);

        if (joinedRoom is not null)
        {
            currentRoom = joinedRoom;
            var roomToUpdate = rooms.FirstOrDefault(r => r.RoomId == roomId);
            if (roomToUpdate != null)
            {
                roomToUpdate.Players = joinedRoom.Players;
                StateHasChanged();
            }
            await NavigateToRoom(roomId);
        }
        else
        {
            Console.WriteLine("Room is full or does not exist.");
        }
    }

    private void CheckPlayer()
    {
        userNameValid = !string.IsNullOrWhiteSpace(playerName);
        if (userNameValid)
            PlayerState.SetUser(new Player(PlayerState.HubConnection.ConnectionId, playerName));

        StateHasChanged();
    }

    private bool IsHubConnectionActive() => PlayerState.HubConnection is not null;

    private async Task NavigateToRoom(string roomId) => NavigationManager.NavigateTo($"/room/{roomId}");
}
