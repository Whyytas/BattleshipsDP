Index: .idea/.idea.BattleshipsDP/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.BattleshipsDP/.idea/workspace.xml b/.idea/.idea.BattleshipsDP/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1733684780295)
+++ b/.idea/.idea.BattleshipsDP/.idea/workspace.xml	(date 1733684780295)
@@ -0,0 +1,180 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoGeneratedRunConfigurationManager">
+    <projectFile>BattleshipsDP/BattleshipsDP.Client/BattleshipsDP.Client.csproj</projectFile>
+    <projectFile profileName="IIS Express">BattleshipsDP/BattleshipsDP/BattleshipsDP.csproj</projectFile>
+    <projectFile profileName="http">BattleshipsDP/BattleshipsDP/BattleshipsDP.csproj</projectFile>
+    <projectFile profileName="https">BattleshipsDP/BattleshipsDP/BattleshipsDP.csproj</projectFile>
+  </component>
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="faffb23b-cee7-4970-9709-eaeea6c3483d" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.BattleshipsDP/.idea/projectSettingsUpdater.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]1/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.BattleshipsDP/.idea/workspace.xml" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="DpaMonitoringSettings">
+    <option name="firstShow" value="false" />
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="master" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;Whyytas&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/kahunas/BattleshipsDP.git&quot;,
+    &quot;accountId&quot;: &quot;6fdc42c0-8bd3-4c37-a1d0-f88041d636ea&quot;
+  }
+}</component>
+  <component name="ProjectColorInfo">{
+  &quot;customColor&quot;: &quot;&quot;,
+  &quot;associatedIndex&quot;: 4
+}</component>
+  <component name="ProjectId" id="2pwisNyKLAd4xykLU6QrBxJpD2z" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    ".NET Launch Settings Profile.BattleshipsDP: https.executor": "Run",
+    ".NET Project.BattleshipsDP.Client.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.git.unshallow": "true",
+    "git-widget-placeholder": "working-brach2",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="RunManager" selected=".NET Launch Settings Profile.BattleshipsDP: https">
+    <configuration name="BattleshipsDP.Client" type="DotNetProject" factoryName=".NET Project">
+      <option name="EXE_PATH" value="" />
+      <option name="PROGRAM_PARAMETERS" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="PASS_PARENT_ENVS" value="1" />
+      <option name="USE_EXTERNAL_CONSOLE" value="0" />
+      <option name="USE_MONO" value="0" />
+      <option name="RUNTIME_ARGUMENTS" value="" />
+      <option name="PROJECT_PATH" value="$PROJECT_DIR$/BattleshipsDP/BattleshipsDP.Client/BattleshipsDP.Client.csproj" />
+      <option name="PROJECT_EXE_PATH_TRACKING" value="1" />
+      <option name="PROJECT_ARGUMENTS_TRACKING" value="1" />
+      <option name="PROJECT_WORKING_DIRECTORY_TRACKING" value="1" />
+      <option name="PROJECT_KIND" value="DotNetCore" />
+      <option name="PROJECT_TFM" value="" />
+      <method v="2">
+        <option name="Build" />
+      </method>
+    </configuration>
+    <configuration name="BattleshipsDP: IIS Express" type="LaunchSettings" factoryName=".NET Launch Settings Profile">
+      <option name="LAUNCH_PROFILE_PROJECT_FILE_PATH" value="$PROJECT_DIR$/BattleshipsDP/BattleshipsDP/BattleshipsDP.csproj" />
+      <option name="LAUNCH_PROFILE_TFM" value="net8.0" />
+      <option name="LAUNCH_PROFILE_NAME" value="IIS Express" />
+      <option name="USE_EXTERNAL_CONSOLE" value="0" />
+      <option name="USE_MONO" value="0" />
+      <option name="RUNTIME_ARGUMENTS" value="" />
+      <option name="GENERATE_APPLICATIONHOST_CONFIG" value="1" />
+      <option name="SHOW_IIS_EXPRESS_OUTPUT" value="0" />
+      <option name="SEND_DEBUG_REQUEST" value="1" />
+      <option name="ADDITIONAL_IIS_EXPRESS_ARGUMENTS" value="" />
+      <method v="2">
+        <option name="Build" />
+      </method>
+    </configuration>
+    <configuration name="BattleshipsDP: http" type="LaunchSettings" factoryName=".NET Launch Settings Profile">
+      <option name="LAUNCH_PROFILE_PROJECT_FILE_PATH" value="$PROJECT_DIR$/BattleshipsDP/BattleshipsDP/BattleshipsDP.csproj" />
+      <option name="LAUNCH_PROFILE_TFM" value="net8.0" />
+      <option name="LAUNCH_PROFILE_NAME" value="http" />
+      <option name="USE_EXTERNAL_CONSOLE" value="0" />
+      <option name="USE_MONO" value="0" />
+      <option name="RUNTIME_ARGUMENTS" value="" />
+      <option name="GENERATE_APPLICATIONHOST_CONFIG" value="1" />
+      <option name="SHOW_IIS_EXPRESS_OUTPUT" value="0" />
+      <option name="SEND_DEBUG_REQUEST" value="1" />
+      <option name="ADDITIONAL_IIS_EXPRESS_ARGUMENTS" value="" />
+      <method v="2">
+        <option name="Build" />
+      </method>
+    </configuration>
+    <configuration name="BattleshipsDP: https" type="LaunchSettings" factoryName=".NET Launch Settings Profile">
+      <option name="LAUNCH_PROFILE_PROJECT_FILE_PATH" value="$PROJECT_DIR$/BattleshipsDP/BattleshipsDP/BattleshipsDP.csproj" />
+      <option name="LAUNCH_PROFILE_TFM" value="net8.0" />
+      <option name="LAUNCH_PROFILE_NAME" value="https" />
+      <option name="USE_EXTERNAL_CONSOLE" value="0" />
+      <option name="USE_MONO" value="0" />
+      <option name="RUNTIME_ARGUMENTS" value="" />
+      <browser name="98ca6316-2f89-46d9-a9e5-fa9e2b0625b3" />
+      <option name="GENERATE_APPLICATIONHOST_CONFIG" value="1" />
+      <option name="SHOW_IIS_EXPRESS_OUTPUT" value="0" />
+      <option name="SEND_DEBUG_REQUEST" value="1" />
+      <option name="ADDITIONAL_IIS_EXPRESS_ARGUMENTS" value="" />
+      <method v="2">
+        <option name="Build" />
+      </method>
+    </configuration>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="faffb23b-cee7-4970-9709-eaeea6c3483d" name="Changes" comment="" />
+      <created>1733683745893</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1733683745893</updated>
+      <workItem from="1733683748359" duration="1024000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="UnityProjectConfiguration" hasMinimizedUI="false" />
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="working-brach2" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.idea.BattleshipsDP/.idea/projectSettingsUpdater.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.BattleshipsDP/.idea/projectSettingsUpdater.xml b/.idea/.idea.BattleshipsDP/.idea/projectSettingsUpdater.xml
new file mode 100644
--- /dev/null	(date 1733684509462)
+++ b/.idea/.idea.BattleshipsDP/.idea/projectSettingsUpdater.xml	(date 1733684509462)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RiderProjectSettingsUpdater">
+    <option name="singleClickDiffPreview" value="1" />
+    <option name="vcsConfiguration" value="3" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]/shelved.patch b/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1733684509464)
+++ b/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]/shelved.patch	(date 1733684509464)
@@ -0,0 +1,175 @@
+Index: Tests/BoardTests.cs
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>using SharedLibrary;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Xunit;\r\n\r\nnamespace Tests;\r\n\r\npublic class BoardTests\r\n{\r\n    private class TestBoard : Board\r\n    {\r\n        public TestBoard(int size = 10) : base(size) { }\r\n    }\r\n\r\n    private class TestShip : Ship\r\n    {\r\n        public TestShip(int size) : base(\"destroyer\", 1) { }\r\n    }\r\n\r\n    [Fact]\r\n    public void Constructor_InitializesGridAndShips()\r\n    {\r\n        // Arrange\r\n        int size = 10;\r\n\r\n        // Act\r\n        var board = new TestBoard(size);\r\n\r\n        // Assert\r\n        Assert.NotNull(board.Grid);\r\n        Assert.Equal(size, board.Grid.Count);\r\n        Assert.All(board.Grid, row => Assert.Equal(size, row.Count));\r\n        Assert.NotNull(board.Ships);\r\n        Assert.Empty(board.Ships);\r\n    }\r\n\r\n    [Fact]\r\n    public void AllShipsDestroyed_ReturnsFalse_WhenSomeShipsNotDestroyed()\r\n    {\r\n        // Arrange\r\n        var board = new TestBoard();\r\n        var intactShip = new TestShip(1);\r\n        board.Ships.Add(intactShip);\r\n\r\n        // Act\r\n        bool result = board.AllShipsDestroyed();\r\n\r\n        // Assert\r\n        Assert.False(result);\r\n    }\r\n\r\n    [Fact]\r\n    public void PlaceShip_AddsShipToGrid_WhenValidCoordinates()\r\n    {\r\n        // Arrange\r\n        var board = new TestBoard();\r\n        var ship = new TestShip(2);\r\n        var coordinates = new List<(int, int)> { (0, 0), (0, 1) };\r\n\r\n        // Act\r\n        bool result = board.PlaceShip(ship, coordinates);\r\n\r\n        // Assert\r\n        Assert.True(result);\r\n        Assert.Contains(ship, board.Ships);\r\n        Assert.Equal(Square.Ship, board.Grid[0][0]);\r\n        Assert.Equal(Square.Ship, board.Grid[0][1]);\r\n    }\r\n\r\n    [Fact]\r\n    public void PlaceShip_ReturnsFalse_WhenCoordinatesOccupied()\r\n    {\r\n        // Arrange\r\n        var board = new TestBoard();\r\n        var ship1 = new TestShip(2);\r\n        var ship2 = new TestShip(1);\r\n        board.PlaceShip(ship1, new List<(int, int)> { (0, 0), (0, 1) });\r\n\r\n        // Act\r\n        bool result = board.PlaceShip(ship2, new List<(int, int)> { (0, 0) });\r\n\r\n        // Assert\r\n        Assert.False(result);\r\n        Assert.DoesNotContain(ship2, board.Ships);\r\n    }\r\n\r\n    [Fact]\r\n    public void RandomlyPlaceShips_PlacesAllShipsOnGrid()\r\n    {\r\n        // Arrange\r\n        var board = new TestBoard();\r\n        var ships = new List<(Ship, Square)>\r\n            {\r\n                (new TestShip(2), Square.Ship),\r\n                (new TestShip(3), Square.Ship)\r\n            };\r\n\r\n        // Act\r\n        board.RandomlyPlaceShips(ships);\r\n\r\n        // Assert\r\n        Assert.Equal(ships.Count, board.Ships.Count);\r\n    }\r\n}
+===================================================================
+diff --git a/Tests/BoardTests.cs b/Tests/BoardTests.cs
+--- a/Tests/BoardTests.cs	(revision c11a52750e7cfc98c025ccb7624f332b139c6621)
++++ b/Tests/BoardTests.cs	(date 1733684124638)
+@@ -17,23 +17,6 @@
+         public TestShip(int size) : base("destroyer", 1) { }
+     }
+ 
+-    [Fact]
+-    public void Constructor_InitializesGridAndShips()
+-    {
+-        // Arrange
+-        int size = 10;
+-
+-        // Act
+-        var board = new TestBoard(size);
+-
+-        // Assert
+-        Assert.NotNull(board.Grid);
+-        Assert.Equal(size, board.Grid.Count);
+-        Assert.All(board.Grid, row => Assert.Equal(size, row.Count));
+-        Assert.NotNull(board.Ships);
+-        Assert.Empty(board.Ships);
+-    }
+-
+     [Fact]
+     public void AllShipsDestroyed_ReturnsFalse_WhenSomeShipsNotDestroyed()
+     {
+@@ -49,24 +32,6 @@
+         Assert.False(result);
+     }
+ 
+-    [Fact]
+-    public void PlaceShip_AddsShipToGrid_WhenValidCoordinates()
+-    {
+-        // Arrange
+-        var board = new TestBoard();
+-        var ship = new TestShip(2);
+-        var coordinates = new List<(int, int)> { (0, 0), (0, 1) };
+-
+-        // Act
+-        bool result = board.PlaceShip(ship, coordinates);
+-
+-        // Assert
+-        Assert.True(result);
+-        Assert.Contains(ship, board.Ships);
+-        Assert.Equal(Square.Ship, board.Grid[0][0]);
+-        Assert.Equal(Square.Ship, board.Grid[0][1]);
+-    }
+-
+     [Fact]
+     public void PlaceShip_ReturnsFalse_WhenCoordinatesOccupied()
+     {
+Index: Tests/ShootingTests.cs
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>using SharedLibrary;\r\nusing Xunit;\r\n\r\nnamespace Tests\r\n{\r\n    public class ShootingTests\r\n    {\r\n        private BattleshipsGame SetupGame()\r\n        {\r\n            var game = new BattleshipsGame();\r\n            game.ATeamPlayer1Id = \"player1\";\r\n            game.ATeamPlayer2Id = \"player2\";\r\n            game.BTeamPlayer1Id = \"player3\";\r\n            game.BTeamPlayer2Id = \"player4\";\r\n            game.SetGameDifficulty(\"Medium\");\r\n            game.StartGame();\r\n            game.PlaceShips();\r\n            return game;\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_WithValidCoordinates_ShouldReturnValidResult()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            int row = 0;\r\n            int col = 0;\r\n            bool isGameOver;\r\n\r\n            // Act\r\n            string result = game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.Contains(result, new[] { \"hit\", \"miss\" });\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_WithPreviouslyShotCoordinate_ShouldReturnAlreadyShot()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            int row = 0;\r\n            int col = 0;\r\n            bool isGameOver;\r\n\r\n            // Act\r\n            game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n            string result = game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.Equal(\"miss\", result);\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_WithInvalidCoordinates_ShouldReturnMiss()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            int row = 100;  // Invalid coordinate\r\n            int col = 100;  // Invalid coordinate\r\n            bool isGameOver;\r\n\r\n            // Act\r\n            string result = game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.Equal(\"miss\", result);\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_WhenHittingAllShips_ShouldSetGameOver()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            bool isGameOver = false;\r\n\r\n            // Act & Assert\r\n            // Shoot all possible coordinates to ensure hitting all ships\r\n            for (int i = 0; i < game.boardSize && !isGameOver; i++)\r\n            {\r\n                for (int j = 0; j < game.boardSize && !isGameOver; j++)\r\n                {\r\n                    game.ShootCell(i, j, game.ATeamPlayer1Id, out isGameOver);\r\n                }\r\n            }\r\n\r\n            // Assert that the game is over after hitting all ships\r\n            Assert.True(game.BTeamBoard.AllShipsDestroyed() || !isGameOver);\r\n        }\r\n\r\n        [Fact]\r\n        public void ValidateShot_WithValidCoordinates_ReturnsTrue()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            int row = 5;\r\n            int col = 5;\r\n\r\n            // Act & Assert\r\n            bool isGameOver;\r\n            string result = game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n            Assert.Contains(result, new[] { \"hit\", \"miss\" });\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(-1, 5)]\r\n        [InlineData(5, -1)]\r\n        [InlineData(10, 5)]\r\n        [InlineData(5, 10)]\r\n        public void ValidateShot_WithInvalidCoordinates_ReturnsMiss(int row, int col)\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n\r\n            // Act\r\n            bool isGameOver;\r\n            string result = game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.Equal(\"miss\", result);\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_WhenNotPlayersTurn_ReturnsFalse()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            int row = 5;\r\n            int col = 5;\r\n            string wrongPlayer = game.BTeamPlayer1Id;\r\n            game.CurrentPlayerId = game.ATeamPlayer1Id;\r\n\r\n            // Act\r\n            bool isGameOver;\r\n            string result = game.ShootCell(row, col, wrongPlayer, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.Equal(\"miss\", result);\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_UpdatesBoardState_AfterHit()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            int row = 0;\r\n            int col = 0;\r\n            bool isGameOver;\r\n\r\n            // Act\r\n            string result = game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.True(game.BTeamBoard.Grid[row][col] == Square.Hit || \r\n                       game.BTeamBoard.Grid[row][col] == Square.Miss);\r\n        }\r\n\r\n        [Fact]\r\n        public void ConsecutiveShots_TrackBoardStateCorrectly()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            bool isGameOver;\r\n            var shotCoordinates = new[] { (0, 0), (0, 1), (1, 0), (1, 1) };\r\n\r\n            // Act\r\n            foreach (var (row, col) in shotCoordinates)\r\n            {\r\n                game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);\r\n            }\r\n\r\n            // Assert\r\n            foreach (var (row, col) in shotCoordinates)\r\n            {\r\n                Assert.True(\r\n                    game.BTeamBoard.Grid[row][col] == Square.Hit || \r\n                    game.BTeamBoard.Grid[row][col] == Square.Miss\r\n                );\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_UpdatesGameState_WhenAllShipsDestroyed()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            bool isGameOver = false;\r\n            int shotCount = 0;\r\n            const int maxShots = 100; // Safety limit\r\n\r\n            // Act\r\n            for (int i = 0; i < game.boardSize && !isGameOver && shotCount < maxShots; i++)\r\n            {\r\n                for (int j = 0; j < game.boardSize && !isGameOver && shotCount < maxShots; j++)\r\n                {\r\n                    game.ShootCell(i, j, game.ATeamPlayer1Id, out isGameOver);\r\n                    shotCount++;\r\n                }\r\n            }\r\n\r\n            // Assert\r\n            Assert.True(isGameOver || shotCount == maxShots);\r\n        }\r\n\r\n        [Theory]\r\n        [InlineData(\"Simple\")]\r\n        [InlineData(\"Big\")]\r\n        [InlineData(\"Piercer\")]\r\n        [InlineData(\"Slasher\")]\r\n        [InlineData(\"Cross\")]\r\n        public void SelectShotType_WithValidType_ShouldSetActiveShot(string shotType)\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            bool isGameOver;\r\n\r\n            // Act\r\n            string result = game.SetSelectedShotType(game.ATeamPlayer1Id, shotType, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.Equal(shotType, game.GetActiveShot(game.ATeamPlayer1Id));\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_WithSpecialShot_ShouldAffectMultipleCells()\r\n        {\r\n            // Arrange\r\n            var game = SetupGame();\r\n            bool isGameOver;\r\n            game.SetSelectedShotType(game.ATeamPlayer1Id, \"Big\", out isGameOver);\r\n            int centerRow = 5;\r\n            int centerCol = 5;\r\n\r\n            // Act\r\n            string result = game.ShootCell(centerRow, centerCol, game.ATeamPlayer1Id, out isGameOver);\r\n\r\n            // Assert\r\n            // Check that surrounding cells are affected (Big shot affects 3x3 area)\r\n            for (int i = -1; i <= 1; i++)\r\n            {\r\n                for (int j = -1; j <= 1; j++)\r\n                {\r\n                    int targetRow = centerRow + i;\r\n                    int targetCol = centerCol + j;\r\n                    if (targetRow >= 0 && targetRow < game.boardSize && \r\n                        targetCol >= 0 && targetCol < game.boardSize)\r\n                    {\r\n                        Assert.True(\r\n                            game.BTeamBoard.Grid[targetRow][targetCol] == Square.Hit || \r\n                            game.BTeamBoard.Grid[targetRow][targetCol] == Square.Miss\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void ShootCell_WithInvalidShotType_ShouldDefaultToSimpleShot()\r\n        {\r\n            // Arrange \r\n            var game = SetupGame();\r\n            bool isGameOver;\r\n            game.SetSelectedShotType(game.ATeamPlayer1Id, \"InvalidShotType\", out isGameOver);\r\n\r\n            // Act\r\n            string result = game.ShootCell(0, 0, game.ATeamPlayer1Id, out isGameOver);\r\n\r\n            // Assert\r\n            Assert.Contains(result, new[] { \"hit\", \"miss\" });\r\n            // Only one cell should be affected\r\n            Assert.True(\r\n                game.BTeamBoard.Grid[0][0] == Square.Hit || \r\n                game.BTeamBoard.Grid[0][0] == Square.Miss\r\n            );\r\n        }\r\n    }\r\n}
+===================================================================
+diff --git a/Tests/ShootingTests.cs b/Tests/ShootingTests.cs
+--- a/Tests/ShootingTests.cs	(revision c11a52750e7cfc98c025ccb7624f332b139c6621)
++++ b/Tests/ShootingTests.cs	(date 1733684124629)
+@@ -137,48 +137,7 @@
+             // Assert
+             Assert.Equal("miss", result);
+         }
+-
+-        [Fact]
+-        public void ShootCell_UpdatesBoardState_AfterHit()
+-        {
+-            // Arrange
+-            var game = SetupGame();
+-            int row = 0;
+-            int col = 0;
+-            bool isGameOver;
+-
+-            // Act
+-            string result = game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);
+-
+-            // Assert
+-            Assert.True(game.BTeamBoard.Grid[row][col] == Square.Hit || 
+-                       game.BTeamBoard.Grid[row][col] == Square.Miss);
+-        }
+-
+-        [Fact]
+-        public void ConsecutiveShots_TrackBoardStateCorrectly()
+-        {
+-            // Arrange
+-            var game = SetupGame();
+-            bool isGameOver;
+-            var shotCoordinates = new[] { (0, 0), (0, 1), (1, 0), (1, 1) };
+-
+-            // Act
+-            foreach (var (row, col) in shotCoordinates)
+-            {
+-                game.ShootCell(row, col, game.ATeamPlayer1Id, out isGameOver);
+-            }
+-
+-            // Assert
+-            foreach (var (row, col) in shotCoordinates)
+-            {
+-                Assert.True(
+-                    game.BTeamBoard.Grid[row][col] == Square.Hit || 
+-                    game.BTeamBoard.Grid[row][col] == Square.Miss
+-                );
+-            }
+-        }
+-
++        
+         [Fact]
+         public void ShootCell_UpdatesGameState_WhenAllShipsDestroyed()
+         {
+@@ -220,58 +179,5 @@
+             // Assert
+             Assert.Equal(shotType, game.GetActiveShot(game.ATeamPlayer1Id));
+         }
+-
+-        [Fact]
+-        public void ShootCell_WithSpecialShot_ShouldAffectMultipleCells()
+-        {
+-            // Arrange
+-            var game = SetupGame();
+-            bool isGameOver;
+-            game.SetSelectedShotType(game.ATeamPlayer1Id, "Big", out isGameOver);
+-            int centerRow = 5;
+-            int centerCol = 5;
+-
+-            // Act
+-            string result = game.ShootCell(centerRow, centerCol, game.ATeamPlayer1Id, out isGameOver);
+-
+-            // Assert
+-            // Check that surrounding cells are affected (Big shot affects 3x3 area)
+-            for (int i = -1; i <= 1; i++)
+-            {
+-                for (int j = -1; j <= 1; j++)
+-                {
+-                    int targetRow = centerRow + i;
+-                    int targetCol = centerCol + j;
+-                    if (targetRow >= 0 && targetRow < game.boardSize && 
+-                        targetCol >= 0 && targetCol < game.boardSize)
+-                    {
+-                        Assert.True(
+-                            game.BTeamBoard.Grid[targetRow][targetCol] == Square.Hit || 
+-                            game.BTeamBoard.Grid[targetRow][targetCol] == Square.Miss
+-                        );
+-                    }
+-                }
+-            }
+-        }
+-
+-        [Fact]
+-        public void ShootCell_WithInvalidShotType_ShouldDefaultToSimpleShot()
+-        {
+-            // Arrange 
+-            var game = SetupGame();
+-            bool isGameOver;
+-            game.SetSelectedShotType(game.ATeamPlayer1Id, "InvalidShotType", out isGameOver);
+-
+-            // Act
+-            string result = game.ShootCell(0, 0, game.ATeamPlayer1Id, out isGameOver);
+-
+-            // Assert
+-            Assert.Contains(result, new[] { "hit", "miss" });
+-            // Only one cell should be affected
+-            Assert.True(
+-                game.BTeamBoard.Grid[0][0] == Square.Hit || 
+-                game.BTeamBoard.Grid[0][0] == Square.Miss
+-            );
+-        }
+     }
+ }
+\ No newline at end of file
Index: .idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00__Changes_.xml b/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00__Changes_.xml
new file mode 100644
--- /dev/null	(date 1733684509468)
+++ b/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00__Changes_.xml	(date 1733684509468)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]" date="1733684441544" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-12-08 21:00 [Changes]" />
+</changelist>
\ No newline at end of file
diff --git a/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]1/shelved.patch b/.idea/.idea.BattleshipsDP/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-12-08_21_00_[Changes]1/shelved.patch
new file mode 100644
